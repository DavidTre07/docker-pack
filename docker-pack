#!/bin/bash

#Script to create a docker image without using an OS but from scratch with binary dependencies
#Avantages: Smallest image, less security problem, ...
#https://github.com/DavidTre07/docker-pack
#Author: david.tre07@gmail.com

#Name: usage
#Description: Print out usage
#Parameters: None
#Return: Nothing
function usage() {
    echo "Usage: $0 [-a file] [-b] [-c cmd] [-d] [-e cmd] [-f file] [-h] [-i] [-l log_file] [-n] [-p user] [-s template_file] [-t tag] [-u uid:gid] [-v version] [-w workdir] binary [binary] [binary] [binary]"
    echo
    echo "-a file : A listing of files to add inside the docker image (absolute path, one file per line)"
    echo "-b      : Don't build the docker"
    echo "-c cmd  : Define command to run on docker CMD"
    echo "-d      : Debug mode"
    echo "-e cmd  : Define entrypoint in table form \'[\"xxxx\",\"xxxx\"]\' (default: tini + 1st binary)"
    echo "-f      : Add font inside docker"
    echo "-h      : This Help"
    echo "-i      : Force usage of an init (tini) even if user specify an entrypoint (it will be started before the user entrypoint)"
    echo "-l file : Log into a file"
    echo "-n      : Activate nslookup"
    echo "-p user : Activate password file with an account provided as parameter"
    echo "-s file : Dockerfile template file (if not provided a default one will be generated)"
    echo "-t tag  : Define Docker image tag (default: 1st binary name)"
    echo "-u uid:gid : Define a uid:gid or user:group or user as docker will run (USER in dockerfile)"
    echo "-v version : Define Docker image version (default: 1.0)"
    echo "-w workdir : Working directory (default: $TEMP_DIR)"
    echo "Binary(ies) to put inside a docker"
    echo ""
    echo "Example: $0 /usr/bin/tar"
    echo "         To run it: docker run --rm tar:1.0 --help"
    echo
}

#Wrap pushd and popd to be silent
function pushd() {
    # shellcheck disable=SC2164
    command pushd "$@" > /dev/null
}
# shellcheck disable=SC2120
function popd() {
    # shellcheck disable=SC2164
    command popd "$@" > /dev/null
}

#Name: msg
#Description: print message
#Parameter: Message to print
#Return: Nothing
function msg() {
    echo "$@"
}

#Name: die
#Description: Print message and exit with error
#Parameters: Message string
#Return: Nothing
function die() {
    echo "" >&2
    echo "ERROR: $*" >&2
    cleanDockerEnv
    kill "$SCRIPT_PID"
    exit 1
}

#Name: debug
#Description: Print message in DEBUG mode
#Parameters: Message string
#Return: Nothing
function debug() {
    [[ $DEBUG == 1 ]] && echo "  DEBUG: $*" >&2
}

#Name: checkPrerequisites
#Description: Verify all prerequisites
#Parameters: None
#Return: Nothing
# shellcheck disable=SC2120
function checkPrerequisites() {
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    debug "Checking prerequisites"
    command -v docker >/dev/null || die "Missing binary: docker"
    debug "docker is available"
    command -v ldd >/dev/null || die "Missing binary: ldd"
    debug "ldd is available"
    debug "Checking if temp folder doesn't exist"
    [ -d "$TEMP_DIR" ] && die "Temp folder $TEMP_DIR already exist"
}

#Name: findDependencies
#Description: Detect binary dependencies
#Parameters: Binary
#Return: Nothing
function findDependencies(){
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_BINARIES="$*"
    local l_BIN
    debug "Finding dependencies of $l_BINARIES"
    msg "$l_BINARIES"
    for l_BIN in $l_BINARIES;do
        ldd "$l_BIN" | grep "/" |sed -e"/:$/d" -e"s%[^/]*/%/%" -e"s%(.*)%%" -e"s%:$%%"
    done |sort -u
}

#Name: prepareFilesToPack
#Description: prepare all files needed for building docker: Copy bin + lib
#Parameters: Binary + list of libs
#Return: Nothing
#TODO: rewrite this function as it is badly writen...
function prepareFilesToPack(){
    debug "prepareFilesToPack $*"
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)" 
    local l_BIN=$1;shift
    local l_LIBS="$*"
    local l_FILE;local l_FILE_TARGET
    local l_DIR;local l_DIR_TARGET
    for l_FILE in $l_BIN $l_LIBS;do
        #Folder
        l_DIR=${l_FILE%/*}
        #If folder doesn't exist create it
        if [ ! -d "${TEMP_DIR}${l_DIR}" ];then
            mkdir -p "${TEMP_DIR}${l_DIR}"
        fi
        if l_FILE_TARGET=$(isSymlink "$l_FILE");then
            debug "Symbolic link detected"
            #Folder
            l_DIR_TARGET=${l_FILE_TARGET%/*}
            #If folder doesn't exist create it
            if [ ! -d "${TEMP_DIR}${l_DIR_TARGET}" ];then
                mkdir -p "${TEMP_DIR}${l_DIR_TARGET}"
            fi
            debug "copy $l_FILE_TARGET to ${TEMP_DIR}${l_DIR_TARGET}"
            cp -p "$l_FILE_TARGET" "${TEMP_DIR}${l_DIR_TARGET}"
            #Create de symlink: Warning this symlink need to be relative
            pushd "${TEMP_DIR}" ||die "Problem to move in ${TEMP_DIR}"
            ln -s "$l_FILE_TARGET" ".${l_FILE}"
            # shellcheck disable=SC2119
            popd ||die "Problem to move back in original folder"
        else
            debug "copy $l_FILE to ${TEMP_DIR}${l_DIR}"
            cp -p "$l_FILE" "${TEMP_DIR}${l_DIR}"
            #Compress file
            #[ ${l_FILE} == ${l_BIN} ] && upx -q "${TEMP_DIR}${l_DIR}/${l_NAME}"
        fi
    done
}

#Name: generateLdLibraryPath
#Description: generate LD_LIBRARY_PATH var with path of libs
#Parameters: FileList
#Return: Nothing (populate global var LD_LIBRARY_PATH)
function generateLdLibraryPath(){
    local l_LIBS;l_LIBS="$*"
    local l_FILE
    local l_LIST
    debug "Generating LD_LIBRARY_PATH for $l_LIBS"
    #Generate list of folder (uniq)
    l_LIST=$(for l_FILE in $l_LIBS;do
        #Folder
         echo "${l_FILE%/*}"
    done |sort -u)
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"$(for l_FILE in $l_LIST;do echo -n ":${l_FILE}";done)
    debug "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
}

#Name: generateDockerfile
#Description: replace vars on template dockerfile or generate a new one
#Parameters: None, use global declarations
#Return: Nothing
# shellcheck disable=SC2120
function generateDockerfile(){
    debug "Generating Dockerfile"
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_UID; local l_GID; local l_USER
    if [[ $TEMPLATE_FILE == "" ]];then
        echo 'FROM scratch' >"${TEMP_DIR}/Dockerfile"
        debug "Adding labels in Dockerfile"
        echo "LABEL org.label-schema.url=\"\" \
    org.label-schema.vcs-url=\"https://github.com/DavidTre07/docker-pack/blob/master/docker-pack\" \
    org.label-schema.name=\"$TAG_NAME\" \
    org.label-schema.build-date=\"$(date --rfc-3339=ns)\" \
    org.label-schema.description=\"Packaged by docker-pack\" \
    org.label-schema.docker.version=\"$TAG_VERSION\" \
    org.label-schema.docker.cmd=\"docker run --rm $TAG_NAME:$TAG_VERSION\" \
    org.label-schema.docker.schema-version=\"1.0\"" >>"${TEMP_DIR}/Dockerfile"
    else
        cp "$TEMPLATE_FILE" "${TEMP_DIR}/Dockerfile"
    fi
    sed -i -e"1i#Generated by docker-pack (https://github.com/DavidTre07/docker-pack)" "${TEMP_DIR}/Dockerfile"
    if [[ $USERID != "" ]];then
        debug "Creating USER line in Dockefile"
        l_USER=$(echo "$USERID"|cut -d: -f1)
        echo "USER $l_USER" >> "${TEMP_DIR}/Dockerfile"
    fi
    debug "Adding LD_LIBRARY_PATH in Dockerfile"
    echo "ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH"         >> "${TEMP_DIR}/Dockerfile"
    debug "Copying files in Dockerfile"
    echo "COPY . /"                                     >> "${TEMP_DIR}/Dockerfile"
    debug "Configuring ENTRYPOINT"
    echo "ENTRYPOINT $ENTRYPOINT"                       >> "${TEMP_DIR}/Dockerfile"
    [[ $COMMAND != "" ]] && echo "CMD $COMMAND"         >> "${TEMP_DIR}/Dockerfile"
}

#Name: calculateUIDGID
#Description: Determine UID and GID
#Parameters: UserName
#Return: print UID:GID:username
function calculateUIDGID(){
    debug "Calculate UID and GID"
    [[ $# -ne 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_PARAM=$1;shift
    local l_TEMP
    local l_USER;local l_UID
    local l_GRP;local l_GID
    #If we have already UID and GID just print out
    if echo "$l_PARAM"|grep -q -w "[0-9]*:[0-9]*";then
        debug "UID:GID:USER $l_PARAM -> We have already UID and GID no need to calculate"
        echo "docker_user:$l_PARAM"
    else
        if echo "$l_PARAM"|grep -q ":";then
            debug "We detected a : (we have user:group) so we convert UID and GID"
            l_USER=$(echo "$l_PARAM"|cut -d: -f 1)
            l_UID=$(id -u "$l_USER") ||die "Unable to determine UID, does $l_USER user exist?"
            l_GRP=$(echo "$l_PARAM"|cut -d: -f 2)
            l_TEMP=$(getent group "$l_GRP") ||die "unable to determine GID, does $l_GRP group exist?"
            l_GID=$(echo "$l_TEMP" | cut -d: -f3)
            debug "Calculated: $l_USER:$l_UID:$l_GID"
            echo "$l_USER:$l_UID:$l_GID"
        else
            debug "If we have only a user name, determine UID and GID"
            l_UID=$(id -u "$l_PARAM") ||die "Unable to determine UID, does $l_PARAM user exist?"
            l_GID=$(id -g "$l_PARAM") ||die "Unable to determine GID"
            debug "Calculated: $l_PARAM:$l_UID:$l_GID"
            echo "$l_PARAM:$l_UID:$l_GID"
        fi
    fi
}

#Name: cleanDockerEnv
#Description: Cleanup docker env
#Parameters: None
#Return: Nothing
# shellcheck disable=SC2120
function cleanDockerEnv(){
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    debug "Cleaning temp folder"
    rm -fr "${TEMP_DIR}"
}

#Name: buildDockerimage
#Description: Build docker image
#Parameters: None (use global vars)
#Return: Nothing
# shellcheck disable=SC2120
function buildDockerimage(){
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    #If no tag provided then we have a problem as in the start of the script we genarate it
    [[ $TAG_NAME == "" ]] &&die "Tag name (TAG_NAME) variable is empty"
    pushd "${TEMP_DIR}" ||die "Problem to move in ${TEMP_DIR}"
    debug "docker build -q -t ${TAG_NAME}:${TAG_VERSION} ."
    if docker build -q -t "${TAG_NAME}:${TAG_VERSION}" .;then
        msg "Docker generated: ${TAG_NAME}:${TAG_VERSION}"
    else
        die "ERROR when generating docker image: ${TAG_NAME}:${TAG_VERSION}"
    fi
    # shellcheck disable=SC2119
    popd ||die "Problem to move back in original folder"
}

#Name: activatePasswd
#Description: Add files in docker so /etc/passwd will works
#Parameters: user:UID:GID
#Return: List of libs or bin needed
function activatePasswd(){
    debug "Generating /etc/passwd"
    [[ $# -ne 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_param=$1;shift
    local l_user;l_user=$(echo "$l_param"|cut -d: -f1)
    local l_uid;l_uid=$(echo "$l_param"|cut -d: -f2)
    local l_gid;l_gid=$(echo "$l_param"|cut -d: -f3)
    #Generate a minimalistic passwd and shadow
    [ -d "${TEMP_DIR}/etc" ] || mkdir -p "${TEMP_DIR}/etc"
    echo "$l_user:x:$l_uid:$l_gid:bin:/:/sbin/nologin" > "${TEMP_DIR}/etc/passwd"
    echo "$l_user:!!:$l_gid::::::" > "${TEMP_DIR}/etc/shadow"
    echo "/sbin/nologin /lib64/libnss_files.so.2"
}

#Name: activateNslookup
#Description: Add files in docker so nslookup will works
#Parameters: None
#Return: List of libs or bin needed
# shellcheck disable=SC2120
function activateNslookup(){
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    debug "Generating nsswitch.conf"
    [ -d "${TEMP_DIR}/etc" ] || mkdir -p "${TEMP_DIR}/etc"
    echo "passwd:     files
shadow:     files
group:      files
hosts:      files dns" > "${TEMP_DIR}/etc/nsswitch.conf"
    echo "/lib64/libnss_dns.so.2"
}

#Name: areFilesPresent
#Description: Check if files are present on disk
#Parameters: Files_list
#Return: Nothing
function areFilesPresent(){
    debug "Checking files present or not"
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_list="$*"
    local l_file
    for l_file in $l_list; do
        [ -f "$l_file" ] || die "File not found: \"$l_file\", where is it ?"
    done
}

#Name: serializeFile
#Description: Serialize file list and remove comments
#Parameters: file_list
#Return: Nothing
function serializeFile(){
    debug "Adding additional files"
    [[ $# -ne 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_filelist=$1;shift
    grep -v "^#" "$l_filelist" | tr '\n' ' '
}

#Name: add_fonts
#Description: Add fonts inside docker
#Parameters:  None
#Return: Nothing
# shellcheck disable=SC2120
function add_fonts(){
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    debug "Generating font list"
    local l_fontslist
    #l_fontslist="/usr/share/fonts/google-droid/DroidSans.ttf"
    l_fontslist=$(fc-list |awk -F ":" '{print $1}')
    echo "$l_fontslist"
}

#Name: separateFileType
#Description: In the file list provided, determine which are ELF or not
#Parameters:  filelist
#Return: Nothing
function separateFileType(){
    debug "Separating file type"
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_filelist="$*"
    local l_file
    local l_shebang
    #Empty filelist
    BINARIES=""; ADDBIN=""
    for l_file in $l_filelist;do
        # shellcheck disable=SC2046
        case "$(file $(readlink -f "$l_file"))" in
        *ELF*) debug "$l_file: ELF"
            BINARIES="$BINARIES $l_file"
            ;;
        *"shell script"*) debug "$l_file: Script"
            ADDBIN="$ADDBIN $l_file"
            msg "Warning: $l_file is a shell script, I'm not able to pack it automatically"
            msg "You need to check inside script what binaries are used. and add it to the list to pack..."
            #At a minimum we can pack the shebang
            l_shebang=$(head -1 "$l_file" | sed -e"s/#\\!//")
            BINARIES="$BINARIES $l_shebang"
            ;;
        *) debug "$l_file: Other file"
            ADDFILES="$ADDFILES $l_file"
            ;;
        esac
    done
    debug "Separated BINARIES: $BINARIES"
    debug "Separated ADDBIN: $ADDBIN"
    debug "Separated ADDFILES: $ADDFILES"
}

#Name: isSymlink
#Description: Determine if file is a symbolic link, if yes return target file and return code 0, if no return code 1
#Parameters: file
#Return: code 0 + target file if symbolic link, code 1 if not symbolic link
function isSymlink(){
    [[ $# -ne 1 ]] && die "$0 -> ${FUNCNAME[0]}() : problem on number of parameters ($#)"
    local l_file=$1;shift
    local l_target
    debug "Determining if $l_file is a symlink"
    if [[ -L $l_file ]];then
        l_target=$(readlink -f "$l_file")
        debug "$l_file is a symbolic link to $l_target"
        echo "$l_target"
        return 0
    else
        debug "$l_file is not a symbolic link"
        return 1
    fi
}

#Name: addTini
#Description: Add tini as entrypoint so signal are well handled
#Parameters: None
#Return: Nothing
function addTini(){
    debug "Adding tini in file to integrate in docker"
    wget -q https://github.com/krallin/tini/releases/latest/download/tini-static-amd64 -O "${TEMP_DIR}/tini"
    chmod +x "${TEMP_DIR}/tini"
}

########## MAIN ##########
COMMAND="";ENTRYPOINT=""
DOCKER_BUILD=1;DEBUG=0
FORCETINI=0; DOWNTINI=0
TEMPLATE_FILE=""
TAG_NAME="";TAG_VERSION="1.0"
USERID="";ADDBIN="";ADDFILES=""
LD_LIBRARY_PATH="."
BIN=$0
TEMP_DIR="/tmp/${BIN##*/}"
SCRIPT_PID=$$

checkPrerequisites

while getopts ":a:bc:de:fhil:np:s:t:u:v:w:" opt; do
    case "$opt" in
    a)  #File listing file to pack
        if [ -f "$OPTARG" ]
        then ADDBIN="$ADDBIN $(serialize_file "$OPTARG")"
        else die "File not found: $OPTARG"
        fi
        ;;
    b)  #Do not build docker image
        DOCKER_BUILD=0
        ;;
    c)  #Docker CMD
        COMMAND=$OPTARG
        ;;
    d)  #Debug mode
        DEBUG=1
        ;;
    e)  #Docker ENTRYPOINT
        ENTRYPOINT=$OPTARG
        ;;
    f)  #Add fonts
        ADDFILES="$ADDFILES $(add_fonts)" 
        ;;
    h)  #Usage
        usage; exit 0
        ;;
    i)  #Force tini even with entrypoint configured by user
        FORCETINI=1
        ;;
    l)  #Logging file
        [ -d "${OPTARG%/*}" ] || mkdir -p "${OPTARG%/*}"
        exec >>"$OPTARG" 2>&1 
        ;;
    n)  #Add nslookup
        ADDBIN="$ADDBIN $(activateNslookup)"
        ;;
    p)  #Add /etc/passwd in docker image
        # shellcheck disable=SC2086
        ADDBIN="$ADDBIN $(activatePasswd $OPTARG:1000:1000)"
        ;;
    s)  #Dockerfile template
        TEMPLATE_FILE=$OPTARG
        ;;
    t)  #Docker image TAG
        TAG_NAME=$OPTARG
        ;;
    u)  #Docker USER (uid:gid or user:group or user)
        USERID=$(calculateUIDGID "$OPTARG")
        # shellcheck disable=SC2086
        ADDBIN="$ADDBIN $(activatePasswd  $USERID)"
        ;;
    v)  #Docker image version
        TAG_VERSION=$OPTARG
        ;;
    w)  #Temp working directory
        TEMP_DIR=$OPTARG
        ;;
    \?) usage; exit 0
        ;;
    :)  die "Option -$OPTARG requires an argument."
        ;;
    esac
done
shift $((OPTIND-1))
if [ $# -lt 1 ];then usage; die "Missing a binary file to pack"; fi
BINARIES="$*"
debug "List of binaries: $BINARIES"

#If no entrypoint then set tini and download it
if [[ $ENTRYPOINT == "" ]]; then
    #If no command then set a default bin in entrypoint
    if [[ $COMMAND == "" ]]; then
        ENTRYPOINT="[\"/tini\", \"--\", \"$1\"]"
        DOWNTINI=1
    else
        ENTRYPOINT="[\"/tini\", \"--\"]"
        DOWNTINI=1
    fi
else
    if [[ $FORCETINI == 1 ]]; then
        debug "Forcing the usage of tini"
        debug "Before: $ENTRYPOINT"
        # shellcheck disable=SC2001
        ENTRYPOINT=$(echo "${ENTRYPOINT}" | sed -e "s%\[%[\"/tini\", \"--\", %")
        DOWNTINI=1
        debug "After: $ENTRYPOINT"
    fi
fi

#If no tag name defined then set a default one
FIRSTBIN="$1"
[[ $TAG_NAME == "" ]] && TAG_NAME=${FIRSTBIN##*/}

areFilesPresent "${BINARIES}" "${ADDBIN}" "${ADDFILES}"
separateFileType "${BINARIES}" "${ADDBIN}"
DEPENDENCIES=$(findDependencies "${BINARIES}")
prepareFilesToPack "${DEPENDENCIES}" "${ADDBIN}" "${ADDFILES}"
[[ $DOWNTINI == 1 ]] && addTini
generateLdLibraryPath "${BINARIES}" "${DEPENDENCIES}"
generateDockerfile

if [[ $DOCKER_BUILD == 1 ]];then
    buildDockerimage
    cleanDockerEnv
else
    msg "Docker is ready to build in folder: ${TEMP_DIR}"
    msg "You can build it with: cd ${TEMP_DIR} && docker build -t ${TAG_NAME}:${TAG_VERSION} ."
fi
