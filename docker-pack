#!/bin/bash

#Script to create a docker image without using an OS but from scratch an binarie dependencies
#Avantages: Smallest image, less security problem, ...
#https://github.com/DavidTre07/docker-pack
#Author: david.tre07@gmail.com

#Name: usage
#Description: Print out usage
#Parameters: None
#Return: Nothing
function usage() {
    echo "Usage: $0 [-a file] [-b] [-c cmd] [-d] [-e cmd] [-f file] [-h] [-l log_file] [-n] [-p user] [-s template_file] [-t tag] [-u uid:gid] [-v version] [-w workdir] binary [binary] [binary] [binary]"
    echo
    echo "-a file : A listing of files to add inside the docker image (absolute path, one file per line)"
    echo "-b      : Don't build the docker"
    echo "-c cmd  : Define command to run on docker CMD"
    echo "-d      : Debug mode"
    echo "-e cmd  : Define entrypoint (default: 1st binary)"
    echo "-f      : Add font inside docker"
    echo "-h      : This Help"
    echo "-l file : Log into a file"
    echo "-n      : Activate nslookup"
    echo "-p user : Activate password file with an account provided as parameter"
    echo "-s file : Dockerfile template file (if not provided a default one will be generated)"
    echo "-t tag  : Define Docker image tag (default: 1st binary name)"
    echo "-u uid:gid : Define a uid:gid or user:group or user as docker will run (USER in dockerfile)"
    echo "-v version : Define Docker image version (default: 1.0)"
    echo "-w workdir : Working directory (default: /tmp/docker-pack)"
    echo "Binary(ies) to put inside a docker"
    echo ""
    echo "Example: $0 /usr/bin/tar"
    echo "         To run it: docker run --rm tar:1.0 --help"
    echo
}

#Wrap pushd and popd to be silent
function pushd() {
    command pushd "$@" > /dev/null
}
function popd() {
    command popd "$@" > /dev/null
}

#Name: msg
#Description: print message
#Parameter: Message to print
#Return: Nothing
function msg() {
    echo "$@"
}

#Name: die
#Description: Print message and exit
#Parameters: Message string
#Return: Nothing
function die() {
    echo "" >&2
    echo "ERROR: $@" >&2
    cleanDockerEnv
    kill $SCRIPT_PID
}

#Name: debug
#Description: Print message and exit
#Parameters: Message string
#Return: Nothing
function debug() {
    [[ $DEBUG == 1 ]] && echo "  DEBUG: $*" >&2
}

#Name: checkPrerequisites
#Description: Verify all prerequisites
#Parameters: None
#Return: Nothing
function checkPrerequisites() {
    debug "Checking prerequisites"
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    command -v docker >/dev/null || die "Missing binary: docker"
    debug "docker is available"
    command -v ldd >/dev/null || die "Missing binary: ldd"
    debug "ldd is available"
    debug "Checking if temp folder doesn't exist"
    [ -d $TEMP_DIR ] && die "Temp folder $TEMP_DIR already exist"
}

#Name: findDependencies
#Description: Detect binary dependencies
#Parameters: Binary
#Return: Nothing
function findDependencies(){
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    local l_BINARIES="$@"
    local l_BIN
    debug "Finding dependencies of $l_BINARIES"
    msg $l_BINARIES
    for l_BIN in $l_BINARIES;do
        ldd $l_BIN | grep "/" |sed -e"/:$/d" -e"s%[^/]*/%/%" -e"s%(.*)%%" -e"s%:$%%"
    done |sort -u
}

#Name: prepareFilesToPack
#Description: prepare all files needed for building docker: Copy bin + lib
#Parameters: Binary + list of libs
#Return: Nothing
function prepareFilesToPack(){
    debug "prepareFilesToPack $@"
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    local l_BIN=$1;shift
    local l_LIBS="$@"
    local l_FILE
    local l_DIR
    local l_NAME
    for l_FILE in $l_BIN $l_LIBS;do
        #Folder
        l_DIR=${l_FILE%/*}
        #File name
        l_NAME=${l_FILE##*/}
        #If target doesn't exist create it
        if [ ! -d ${TEMP_DIR}${l_DIR} ];then
            mkdir -p ${TEMP_DIR}${l_DIR}
        fi
        debug "cp $l_FILE ${TEMP_DIR}${l_DIR}"
        cp -p $l_FILE ${TEMP_DIR}${l_DIR}
        #Compress file
        #[ ${l_FILE} == ${l_BIN} ] && upx -q "${TEMP_DIR}${l_DIR}/${l_NAME}"
    done
}

#Name: generateLdLibraryPath
#Description: generate LD_LIBRARY_PATH var with path of libs
#Parameters: FileList
#Return: Nothing (populate global var LD_LIBRARY_PATH)
function generateLdLibraryPath(){
    local l_LIBS="$@"
    local l_FILE
    local l_LIST
    debug "Generating LD_LIBRARY_PATH for $l_LIBS"
    #Generate list of folder (uniq)
    l_LIST=$(for l_FILE in $l_LIBS;do
        #Folder
         echo "${l_FILE%/*}"
    done |sort -u)
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"$(for l_FILE in $l_LIST;do echo -n ":${l_FILE}";done)
    debug "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
}

#Name: generateDockerfile
#Description: replace vars on template dockerfile
#Parameters: None
#Return: Nothing
function generateDockerfile(){
    debug "Generating Dockerfile"
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    if [[ $TEMPLATE_FILE == "" ]];then
        echo 'FROM scratch' >${TEMP_DIR}/Dockerfile
    else
        cp $TEMPLATE_FILE ${TEMP_DIR}/Dockerfile
    fi
    sed -i -e"1i#Generated by docker-pack (https://github.com/DavidTre07/docker-pack)" ${TEMP_DIR}/Dockerfile
    echo "ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH" >> ${TEMP_DIR}/Dockerfile
    echo "COPY . /" >> ${TEMP_DIR}/Dockerfile
    [[ $USERID != "" ]] && echo "USER $USERID" >> ${TEMP_DIR}/Dockerfile
    [[ $ENTRYPOINT != "" ]] && echo "ENTRYPOINT [\"$ENTRYPOINT\"]" >> ${TEMP_DIR}/Dockerfile
    [[ $COMMAND != "" ]] && echo "CMD [\"$COMMAND\"]" >> ${TEMP_DIR}/Dockerfile
}

#Name: calculateUIDGID
#Description: Determine UID and GID
#Parameters: UserName
#Return: UID:GID
function calculateUIDGID(){
    debug "Calculate UID and GID"
    [[ $# -ne 1 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    local l_PARAM=$1;shift
    local l_USER;local l_UID
    local l_GRP;local l_GID
    #If we have already UID and GID just print out
    echo $l_PARAM|grep -q -w "[0-9]*:[0-9]*"
    if [[ $? == 0 ]];then
        debug "UID-GID: $l_PARAM -> We have already UID and GID no need to calculate"
        echo $l_PARAM
    else
        echo $l_PARAM|grep -q ":"
        if [[ $? == 0 ]];then
            debug "We detected a : (we have user:group) so we convert UID and GID"
            l_USER=$(echo $l_PARAM|cut -d: -f 1)
            l_UID=$(id -u $l_USER)
            l_GRP=$(echo $l_PARAM|cut -d: -f 2)
            l_GID=$(getent group $l_GRP | cut -d: -f3)
            debug "Calculated: $l_PARAM = $l_UID:$l_GID"
            echo "$l_UID:$l_GID"
        else
            debug "If we have only a user name, determine UID and GID"
            l_UID=$(id -u $l_PARAM)
            l_GID=$(id -g $l_PARAM)
            debug "Calculated: $l_PARAM = $l_UID:$l_GID"
            echo "$l_UID:$l_GID"
        fi
    fi
}

#Name: cleanDockerEnv
#Description: Cleanup docker env
#Parameters: None
#Return: Nothing
function cleanDockerEnv(){
    debug "Cleaning temp folder"
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    rm -fr ${TEMP_DIR}
}

#Name: buildDockerimage
#Description: Build docker image
#Parameters: None (use global vars)
#Return: Nothing
function buildDockerimage(){
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    #If no tag provided then generate one
    if [[ $TAG_NAME == "" ]];then
        [[ $COMMAND != "" ]] && TAG_NAME=${COMMAND##*/}
        [[ $ENTRYPOINT != "" ]] && TAG_NAME=${ENTRYPOINT##*/}
    fi
    pushd ${TEMP_DIR}
    debug "docker build -q -t ${TAG_NAME}:${TAG_VERSION} ."
    docker build -q -t ${TAG_NAME}:${TAG_VERSION} .
    [[ $? == 0 ]] && msg "Docker generated: ${TAG_NAME}:${TAG_VERSION}"
    popd
}

#Name: activatePasswd
#Description: Add files in docker so /etc/passwd will works
#Parameters: user
#Return: Libs or bin needed
function activatePasswd(){
    debug "Generating /etc/passwd"
    [[ $# -ne 1 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    local l_user=$1;shift
    #Generate a small passwd and shadow
    [ -d "${TEMP_DIR}/etc" ] || mkdir -p ${TEMP_DIR}/etc
    echo "$l_user:x:1000:1000:bin:/:/sbin/nologin" > "${TEMP_DIR}/etc/passwd"
    echo "$l_user:!!:1000::::::" > "${TEMP_DIR}/etc/shadow"
    echo "/sbin/nologin /lib64/libnss_files.so.2"
}

#Name: activateNslookup
#Description: Add files in docker so nslookup will works
#Parameters: None
#Return: Libs needed
function activateNslookup(){
    debug "Generating nsswitch.conf"
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    [ -d "${TEMP_DIR}/etc" ] || mkdir -p ${TEMP_DIR}/etc
    echo "passwd:     files
shadow:     files
group:      files
hosts:      files dns" > "${TEMP_DIR}/etc/nsswitch.conf"
    echo "/lib64/libnss_dns.so.2"
}

#Name: areFilesPresent
#Description: Check if files are present on disk
#Parameters: Files_list
#Return: Nothing
function areFilesPresent(){
    debug "Checking files present or not"
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    local l_list="$@"
    local l_file
    for l_file in $l_list; do
        [ -f $l_file ] || die "File not found: \"$l_file\", where is it ?"
    done
}

#Name: serializeFile
#Description: Serialize file list and remove comments
#Parameters: file_list
#Return: Nothing
function serializeFile(){
    debug "Adding additional files"
    [[ $# -ne 1 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    local l_filelist=$1;shift
    cat $l_filelist | grep -v "^#" | tr '\n' ' '
}

#Name: add_fonts
#Description: Add fonts inside docker
#Parameters:  None
#Return: Nothing
function add_fonts(){
    debug "Generating font list"
    [[ $# -ne 0 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    #local l_fontslist="/usr/share/fonts/google-droid/DroidSans.ttf"
    local l_fontslist=$(fc-list |awk -F ":" '{print $1}')
    echo $l_fontslist
}

#Name: separateFileType
#Description: In the file list provided, determine which are ELF or not
#Parameters:  filelist
#Return: Nothing
function separateFileType(){
    debug "Separating file type"
    [[ $# -lt 1 ]] && die "$0 -> ${FUNCNAME}() : problem on number of parameters ($#)"
    local l_filelist=$@
    local l_file
    local l_shebang
    #Empty filelist
    BINARIES=""; ADDBIN=""
    for l_file in $l_filelist;do
        case "$(file $(readlink -f $l_file))" in
        *ELF*) debug "$l_file: ELF"
            BINARIES="$BINARIES $l_file"
            ;;
        *"shell script"*) debug "$l_file: Script"
            ADDBIN="$ADDBIN $l_file"
            msg "Warning: $l_file is a shell script, I'm not able to pack it automatically"
            msg "You need to check inside script what binaries are used. and add it to the list to pack..."
            #At a minimum we can pack the shebang
            l_shebang=$(head -1 $l_file | sed -e"s/#\!//")
            BINARIES="$BINARIES $l_shebang"
            ;;
        *) debug "$l_file: Other file"
            ADDFILES="$ADDFILES $l_file"
            ;;
        esac
    done
    debug "Separated BINARIES: $BINARIES"
    debug "Separated ADDBIN: $ADDBIN"
    debug "Separated ADDFILES: $ADDFILES"
}

########## MAIN ##########
COMMAND="";ENTRYPOINT=""
DOCKER_BUILD=1;DEBUG=0
TEMPLATE_FILE=""
TAG_NAME="";TAG_VERSION="1.0"
USERID="";ADDBIN="";ADDFILES=""
LD_LIBRARY_PATH="."
TEMP_DIR="/tmp/docker-pack"
SCRIPT_PID=$$

checkPrerequisites

while getopts ":a:bc:de:fl:hnp:s:t:u:v:w:" opt; do
    case "$opt" in
    a)  #File listing file to pack
        [ -f $OPTARG ] && ADDBIN="$ADDBIN $(serialize_file $OPTARG)" || die "File not found: $OPTARG" 
        ;;
    b)  #Do not build docker image
        DOCKER_BUILD=0
        ;;
    c)  #Docker CMD
        COMMAND=$OPTARG
        ;;
    d)  #Debug mode
        DEBUG=1
        ;;
    e)  #Docker ENTRYPOINT
        ENTRYPOINT=$OPTARG
        ;;
    f)  #Add fonts
        ADDFILES="$ADDFILES $(add_fonts)" 
        ;;
    h)  #Usage
        usage; exit 0
        ;;
    l)  #Logging file
        [ -d ${OPTARG%/*} ] || mkdir -p ${OPTARG%/*}
        exec >>$OPTARG 2>&1 
        ;;
    n)  #Add nslookup
        ADDBIN="$ADDBIN $(activateNslookup)"
        ;;
    p)  #Add /etc/passwd in docker image
        ADDBIN="$ADDBIN $(activatePasswd $OPTARG)"
        ;;
    s)  #Dockerfile template
        TEMPLATE_FILE=$OPTARG
        ;;
    t)  #Docker image TAG
        TAG_NAME=$OPTARG
        ;;
    u)  #Docker USER (uid:gid or user:group or user)
        USERID=$(calculateUIDGID $OPTARG)
        ;;
    v)  #Docker image version
        TAG_VERSION=$OPTARG
        ;;
    w)  #Temp working directory
        TEMP_DIR=$OPTARG
        ;;
    \?) usage; exit 0
        ;;
    :)  die "Option -$OPTARG requires an argument."
        ;;
    esac
done
shift $((OPTIND-1))
if [ $# -lt 1 ];then usage; die "Missing a binary file to pack"; fi
BINARIES="$@"
debug "List of binaries: $BINARIES"

#If no command provided and no entrypoint then set 1st bin as default entrypoint
if [[ $COMMAND == "" ]];then
    [[ $ENTRYPOINT == "" ]] && ENTRYPOINT=$1
fi

areFilesPresent ${BINARIES} ${ADDBIN} ${ADDFILES}
separateFileType ${BINARIES} ${ADDBIN}
DEPENDENCIES=$(findDependencies ${BINARIES})
prepareFilesToPack ${DEPENDENCIES} ${ADDBIN} ${ADDFILES}
generateLdLibraryPath ${BINARIES} ${DEPENDENCIES}
generateDockerfile

if [[ $DOCKER_BUILD == 1 ]];then
    buildDockerimage
    cleanDockerEnv
else
    msg "Docker is ready to build in folder: ${TEMP_DIR}"
    msg "You can build it with: cd ${TEMP_DIR}; docker -t docker_name:1.0 ."
fi
